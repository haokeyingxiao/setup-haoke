name: 'Setup HaoKe'
description: 'Install HaoKe with specific versions in your CI'
branding:
  color: 'blue'
  icon: 'download'
inputs:
  env:
    description: 'Environment for HaoKe'
    required: true
    default: 'test'
  haoke-version:
    description: 'HaoKe Version to use'
    required: true
    default: 'v6.6.2.0'
  php-version:
    description: 'PHP Version to use'
    required: true
    default: '8.2'
  php-extensions:
    description: 'PHP extensions to install'
    required: true
    default: ''
  install:
    description: 'Install HaoKe'
    required: true
    default: 'false'
  install-locale:
    description: 'Locale to install'
    required: true
    default: 'zh-CN'
  install-currency:
    description: 'Currency to install'
    required: true
    default: 'CNY'
  keep-composer-tools:
    description: 'Keep HaoKe Composer tools (PHPStan, ECS, BC-Checker)'
    required: true
    default: 'false'
  mysql-version:
    description: 'MySQL Version to use'
    required: true
    default: 'builtin'
runs:
  using: "composite"
  steps:
    - name: Clone HaoKe
      uses: actions/checkout@v4
      with:
        repository: "haokeyingxiao/haoke"
        ref: ${{ inputs.haoke-version }}

    - name: Remove vendor-bin
      if: inputs.keep-composer-tools == 'false'
      shell: bash
      run: rm -rf vendor-bin
        
    - name: Setup PHP
      uses: shivammathur/setup-php@v2
      with:
        php-version: ${{ inputs.php-version }}
        extensions: ${{ inputs.php-extensions }}
        tools: symfony-cli
    
    - name: Start Default MySQL
      if: inputs.mysql-version == 'builtin'
      shell: bash
      run: |
        sudo mv /var/lib/mysql /var/lib/mysql-old
        sudo mkdir /var/lib/mysql
        sudo mount -t tmpfs tmpfs /var/lib/mysql -o size=1G
        sudo -u mysql mysqld --datadir=/var/lib/mysql --default-time-zone=SYSTEM --initialize-insecure
        sudo systemctl start mysql

    - name: Start External MySQL
      if: inputs.mysql-version != 'builtin' && inputs.mysql-version != 'skip'
      shell: bash
      run: |
        docker run \
          --name mysql \
          -p 3306:3306 \
          -e MYSQL_ALLOW_EMPTY_PASSWORD=yes \
          -e MARIADB_ALLOW_EMPTY_ROOT_PASSWORD=yes \
          --tmpfs /var/lib/mysql:rw,size=1G \
          -d \
          ${{ inputs.mysql-version }}

    - name: Configure MySQL Client
      if: inputs.mysql-version != 'builtin'
      shell: bash
      run: |
        echo "[client]" > $HOME/.my.cnf
        echo "host=127.0.0.1" > $HOME/.my.cnf
        echo "user=root" > $HOME/.my.cnf

    - name: Wait for MySQL
      if: inputs.mysql-version != 'builtin' && inputs.mysql-version != 'skip'
      shell: bash
      run: |
        if docker exec mysql mariadb --version; then
          while ! docker exec mysql mariadb-admin ping -h localhost --silent; do
            sleep 1
          done
        else
          while ! docker exec mysql mysqladmin ping -h localhost --silent; do
            sleep 1
          done
        fi

    - name: Setup HaoKe Environment Variables
      shell: bash
      run: |
        echo "APP_ENV=${{ inputs.env }}" >> "$GITHUB_ENV"
        echo "APP_SECRET=def00000bb5acb32b54ff8ee130270586eec0e878f7337dc7a837acc31d3ff00f93a56b595448b4b29664847dd51991b3314ff65aeeeb761a133b0ec0e070433bff08e48" >> "$GITHUB_ENV"
        echo "APP_URL=http://localhost:8000" >> "$GITHUB_ENV"
        echo "DATABASE_URL=mysql://root@127.0.0.1/haoke" >> "$GITHUB_ENV"

    - name: Retrieve the cached "vendor" directory (if present)
      uses: actions/cache@v3
      id: composer-cache
      with:
        path: vendor
        key: ${{ runner.os }}-haoke-setup-composer-${{ inputs.haoke-version }}-${{ inputs.php-version }}
    
    - name: Install dependencies
      if: steps.composer-cache.outputs.cache-hit != 'true'
      shell: bash
      run: composer install

    - name: Install HaoKe
      if: inputs.install == 'true'
      shell: bash
      run: bin/console system:install --create-database --drop-database --basic-setup --force --shop-locale=${{ inputs.install-locale }} --shop-currency=${{ inputs.install-currency }}

    - name: Start Webserver
      if: inputs.install == 'true' && inputs.env == 'e2e'
      shell: bash
      run: symfony server:start -d
